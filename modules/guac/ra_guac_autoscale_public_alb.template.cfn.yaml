AWSTemplateFormatVersion: 2010-09-09
Conditions:
  UseACM: !Equals
    - !Ref SslCertificateService
    - ACM
  UseAmiLookup: !Equals
    - !Ref AmiId
    - ''
  UseAutoUpdateStack: !Not
    - !Equals
      - !Ref UpdateSchedule
      - ''
  UseBrandText: !Not
    - !Equals
      - !Ref BrandText
      - ''
  UseDockerAuthentication: !And
    - !Not
      - !Equals
        - !Ref DockerPasswordSsm
        - ''
    - !Not
      - !Equals
        - !Ref DockerUsernameSsm
        - ''
  UseExtensionPriority: !Not
    - !Equals
      - !Ref ExtensionPriority
      - ''
  UseGlobalAccelerator: !Equals
      - !Ref CreateGlobalAccelerator
      - 'true'
  UseRoute53DnsRecord: !And
    - !Not
      - !Equals
        - !Ref Route53DnsName
        - ''
    - !Not
      - !Equals
        - !Ref Route53HostedZoneId
        - ''
  UseLdap: !Not
    - !And
      - !Equals
        - !Ref LdapDN
        - ''
      - !Equals
        - !Ref LdapServer
        - ''
  UseSaml: !Not
    - !And
      - !Equals
        - !Ref SamlCallbackUrl
        - ''
      - !Equals
        - !Ref SamlIdpMetadataUrl
        - ''
  UseScalingPolicy: !Or
    - !Equals
      - !Ref ScaleUpSchedule
      - ''
    - !Equals
      - !Ref ScaleDownSchedule
      - ''
  UseScheduledAction: !And
    - !Not
      - !Equals
        - !Ref ScaleUpSchedule
        - ''
    - !Not
      - !Equals
        - !Ref ScaleDownSchedule
        - ''
  UseURL1: !Not
    - !Equals
      - !Ref URL1
      - ''
  UseURL2: !Not
    - !Equals
      - !Ref URL2
      - ''
  UseURLText1: !Not
    - !Equals
      - !Ref URLText1
      - ''
  UseURLText2: !Not
    - !Equals
      - !Ref URLText2
      - ''
  InstallCloudWatchAgent: !Not
    - !Equals
      - !Ref CloudWatchAgentUrl
      - ''
Description: This templates deploys Guacamole (Guac) instances in an AutoScale Group behind an ALB
Mappings:
  InstanceTypeMap:
    'Fn::Transform':
      Name: AWS::Include
      Parameters:
        Location: s3://app-chemistry/snippets/instance_type_map.snippet.cfn.yaml
Metadata:
  Version: 0.8.3
  cfn-lint:
    config:
      ignore_checks:
        - E7001
        - W1011
Outputs:
  AlbSecurityGroupId:
    Description: Security Group ID for the Guacamole Application Load Balancer
    Value: !Ref AlbSecurityGroup
  Ec2SecurityGroupId:
    Description: Security Group ID for Guacamole instances
    Value: !Ref Ec2SecurityGroup
  GlobalAcceleratorDnsName:
    Description: DNS name for the GlobalAccelerator
    Value: !Sub ${GlobalAccelerator.DnsName}
  LoadBalancerDns:
    Description: DNS name for the ALB
    Value: !Sub ${ALB.DNSName}
  LoadBalancerName:
    Description: Name of the ALB
    Value: !Ref ALB
  TargetGroupName:
    Description: Name of the ALB Target Group
    Value: !Ref ALBTargetGroup
Parameters:
  AmiId:
    Default: ''
    Description: (Optional) AMI ID -- will supersede Lambda-based AMI lookup using AmiNameSearchString
    Type: String
  AmiFilters:
    Default: '[{"Name": "name", "Values": ["amzn-ami-hvm-2018.03.*-x86_64-gp2"]}]'
    Description: Json string containing list of maps of ami search filters. refer to the boto3 docs for a complete filter list (https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/ec2.html#EC2.Client.describe_images)
    Type: String
  AmiLookupLambdaArn:
    Description: Arn of the ami-lookup-id lambda. See https://github.com/plus3it/lookup-ami-ids for more details.
    Type: String
  AmiOwners:
    Default: '["amazon"]'
    Description: Json string containing a list of owners to filter the ami search against
    Type: String
  AlbScheme:
    AllowedValues:
      - internal
      - internet-facing
    Default: internal
    Description: Setting to configure the load balancer to be publicly routable from the internet or only privately within the VPC
    Type: String
  AlbSubnetIds:
    Description: List of Subnet IDs where the Guacamole load-balancer will run
    Type: List<AWS::EC2::Subnet::Id>
  AsgSubnetIds:
    Description: List of Subnet IDs where the Guacamole instances will run
    Type: List<AWS::EC2::Subnet::Id>
  BrandText:
    Default: ''
    Description: Text/Label to display branding for the Guac Login page
    Type: String
  CloudWatchAgentUrl:
    AllowedPattern: ^$|^s3://.*\.rpm$
    Default: ''
    Description: >-
      (Optional) S3 URL to CloudWatch Agent installer. Example:
      s3://amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
    Type: String
  CreateGlobalAccelerator:
    AllowedValues:
      - false
      - true
    Default: true
    Description: Decision on whether to create Global Accelerator resources for the Guac
    Type: String
  DesiredCapacity:
    Default: '1'
    Description: The number of instances the autoscale group will spin up initially
    MinLength: '1'
    Type: String
  DockerGuacamoleImage:
    Default: guacamole/guacamole:1.4.0
    Description: Identifier for GUACAMOLE docker image. Used by docker pull to retrieve the guacamole image. Defaults to guacamole/guacamole:1.4.0
    Type: String
  DockerGuacdImage:
    Default: guacamole/guacd:1.4.0
    Description: Identifier for GUACD docker image. Used by docker pull to retrieve the guacd image. Defaults to guacamole/guacamole:1.4.0
    Type: String
  DockerPasswordSsm:
    Default: ''
    Description: AWS Systems Manager Parameter Store location for Docker password
    Type: String
  DockerUsernameSsm:
    Default: ''
    Description: AWS Systems Manager Parameter Store location for Docker username
    Type: String
  ExtensionPriority:
    Default: ''
    Description: (Optional) Comma-separated list of namespaces designating the order in which each extension is loaded. If not provided, extensions are loaded according to filename
    Type: String
  ForceUpdateToggle:
    AllowedValues:
      - A
      - B
    Default: A
    Description: A/B toggle that forces a change to a LaunchTemplate property, triggering the AutoScale Update Policy
    Type: String
  GuacBaseDN:
    Default: CN=GuacConfigGroups
    Description: The base of the DN for all Guacamole configurations.
    Type: String
  InstanceType:
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - t2.xlarge
      - t2.2xlarge
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
      - t3.xlarge
      - t3.2xlarge
      - c5.large
      - c5.xlarge
      - c5.2xlarge
      - c5.4xlarge
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - r4.large
      - r4.xlarge
    Default: t3.micro
    Description: Amazon EC2 instance type for the Guacamole Instances
    Type: String
  KeyPairName:
    Description: Public/private key pairs allow you to securely connect to your instance after it launches
    Type: AWS::EC2::KeyPair::KeyName
  LdapDN:
    Default: ''
    Description: Distinguished Name (DN) of the LDAP directory
    Type: String
  LdapServer:
    Default: ''
    Description: Name of LDAP server Guacamole will authenticate against
    Type: String
  MaxCapacity:
    Default: '2'
    Description: The maximum number of instances for the autoscale group
    MinLength: '1'
    Type: String
  MinCapacity:
    Default: '0'
    Description: The minimum number of instances for the autoscale group
    MinLength: '1'
    Type: String
  MySqlAutoCreateAccounts:
    AllowedValues:
      - false
      - true
    Default: true
    Description: Decision on whether to automatically create local accounts when users log using alternate authentication methods
    Type: String
  MySqlDatabaseName:
    Default: ''
    Description: Name of the database Guacamole will use to store application data
    Type: String
  MySqlHostName:
    Default: ''
    Description: FQDN or IP address of remote MySQL database server hosting the Guacamole database
    Type: String
  MySqlPassword:
    Default: ''
    Description: Password for the Guacamole MySQL database user
    Type: String
  MySqlPort:
    Default: '3306'
    Description: Port used by the MySQL database server
    Type: String
  MySqlSslMode:
    Default: 'disabled'
    Description: SSL mode Guacamole will use when when communicating with the database host
    Type: String
  MySqlUserName:
    Default: ''
    Description: Username with permissions to access the Guacamole database
    Type: String
  RemoteAccessScriptsUrl:
    Description: URL prefix where the remote access scripts can be retrieved
    Default: https://raw.githubusercontent.com/plus3it/terraform-aws-remote-access/master
    Type: String
    AllowedPattern: ^https://.*
  Route53HostedZoneId:
    Default: ''
    Description: (Optional) ID of the Route53 Hosted Zone. Required if the desire is to create a DNS record for Guac and `Route53DnsName` is also provided
    Type: String
  Route53DnsName:
    Default: ''
    Description: (Optional) Friendly DNS Name for the RDGW service (e.g. rdgw.example.com).  Required if the desire is to create a DNS record for Guac
    Type: String
  SamlCallbackUrl:
    Default: ''
    Description:  URL SAML identity provider will use after a successful authentication to respond to Guacamole
    Type: String
  SamlEntityId:
    Default: ''
    Description:  Entity ID of the Guacamole SAML client. Required if either SamlIdpMetadataUrl is not provided or ID is not in metadata file
    Type: String
  SamlGroupAttribute:
    Default: ''
    Description: Name of the attribute provided by the SAML identity provider with group information of user
    Type: String
  SamlIdpMetadataUrl:
    Default: ''
    Description: URL of XML metadata file with information on how to authenticate with the SAML identity provider
    Type: String
  ScaleDownDesiredCapacity:
    Default: '1'
    Description: (Optional) Desired number of instances during the Scale Down Scheduled Action; ignored if ScaleDownSchedule is unset
    Type: Number
  ScaleDownSchedule:
    Default: ''
    Description: (Optional) Scheduled Action in cron-format (UTC) to scale down the number of instances; ignored if empty or ScaleUpSchedule is unset (E.g. "0 0 * * *")
    Type: String
  ScaleUpSchedule:
    Default: ''
    Description: (Optional) Scheduled Action in cron-format (UTC) to scale up to the Desired Capacity; ignored if empty or ScaleDownSchedule is unset (E.g. "0 10 * * Mon-Fri")
    Type: String
  SslCertificateName:
    Description: The name (for IAM) or identifier (for ACM) of the SSL certificate to associate with the ALB -- the cert must already exist in the service
    Type: String
  SslCertificateService:
    AllowedValues:
      - ACM
      - IAM
    Default: ACM
    Description: The service hosting the SSL certificate
    Type: String
  URL1:
    Default: https://accounts.example.com
    AllowedPattern: ^https?://.*$
    Description: First custom URL/link to display on the Guac Login page
    Type: String
  URL2:
    Default: https://redmine.example.com
    AllowedPattern: ^https?://.*$
    Description: Second custom URL/link to display on the Guac Login page
    Type: String
  URLText1:
    Default: Account Management
    Description: Text/Label to display for the First custom URL/link displayed on the Guac Login page
    Type: String
  URLText2:
    Default: Example Redmine
    Description: Text/Label to display for the Second custom URL/link displayed on the Guac Login page
    Type: String
  UpdateSchedule:
    AllowedPattern: ^$|^cron\(.*\)$|^rate\(.*\)$|^$
    ConstraintDescription: Must be in CloudWatch events schedule expression format (Cron or Rate).
    Default: ''
    Description: (Optional) Time interval between auto stack updates. Refer to the AWS documentation for valid input syntax:https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html
    Type: String
  VpcId:
    Description: VPC ID
    Type: AWS::EC2::VPC::Id
Resources:
  ALB:
    Properties:
      Scheme: !Ref AlbScheme
      SecurityGroups:
        - !Ref AlbSecurityGroup
      Subnets: !Ref AlbSubnetIds
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
  ALBTargetGroup:
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /guacamole/
      HealthCheckPort: '8080'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 5
      Port: 8080
      Protocol: HTTP
      UnhealthyThresholdCount: 10
      VpcId: !Ref VpcId
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
  AlbSecurityGroup:
    Properties:
      GroupDescription: Enable Guacamole remote access from the Internet
      Tags:
        - Key: Name
          Value: !Sub ra-guac-alb-${AWS::StackName}
      VpcId: !Ref VpcId
    Type: AWS::EC2::SecurityGroup
  AlbToGuacEgressTcp80:
    Properties:
      DestinationSecurityGroupId: !Ref Ec2SecurityGroup
      GroupId: !Ref AlbSecurityGroup
      FromPort: 8080
      IpProtocol: tcp
      ToPort: 8080
    Type: AWS::EC2::SecurityGroupEgress
  AlbToGuacIngressTcp80:
    Properties:
      FromPort: 8080
      GroupId: !Ref Ec2SecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref AlbSecurityGroup
      ToPort: 8080
    Type: AWS::EC2::SecurityGroupIngress
  AmiIdLookup:
    Condition: UseAmiLookup
    Properties:
      Filters: !Ref AmiFilters
      ForceUpdateToggle: !Ref ForceUpdateToggle
      Owners: !Ref AmiOwners
      Region: !Ref AWS::Region
      ServiceToken: !Ref AmiLookupLambdaArn
    Type: Custom::AmiIdLookup
  AutoScalingGroup:
    CreationPolicy:
      ResourceSignal:
        Count: !Ref DesiredCapacity
        Timeout: PT20M
    Properties:
      DesiredCapacity: !Ref DesiredCapacity
      HealthCheckGracePeriod: 3600
      HealthCheckType: ELB
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MaxSize: !Ref MaxCapacity
      MetricsCollection:
        - Granularity: 1Minute
      MinSize: !Ref MinCapacity
      Tags:
        - Key: Name
          PropagateAtLaunch: true
          Value: !Ref AWS::StackName
      TargetGroupARNs:
        - !Ref ALBTargetGroup
      VPCZoneIdentifier: !Ref AsgSubnetIds
    Type: AWS::AutoScaling::AutoScalingGroup
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: true
  AutoUpdateStack:
    Condition: UseAutoUpdateStack
    Properties:
      ServiceToken: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:cfn-update-scheduler-dev-cfn_auto_update_broker
      StackName: !Ref AWS::StackName
      ToggleParameter: ForceUpdateToggle
      ToggleValues:
        - A
        - B
      UpdateSchedule: !Ref UpdateSchedule
    Type: Custom::AutoUpdateStack
  CPUAlarmHigh:
    Condition: UseScalingPolicy
    Properties:
      AlarmActions:
        - !Ref ScaleUpPolicy
      AlarmDescription: Scale-up if CPU > 30% for 5 minutes or metric disappears indicating instance is down
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref AutoScalingGroup
      EvaluationPeriods: 5
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Period: 60
      Statistic: Average
      Threshold: 30
    Type: AWS::CloudWatch::Alarm
  Ec2IamInstanceProfile:
    Properties:
      Path: /
      Roles:
        - !Ref Ec2IamRole
    Type: AWS::IAM::InstanceProfile
  Ec2IamRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - ssm.amazonaws.com
        Version: 2012-10-17
      Path: /
    Type: AWS::IAM::Role
  Ec2IamRolePolicy:
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ssm:DescribeAssociation
              - ssm:GetDeployablePatchSnapshotForInstance
              - ssm:GetDocument
              - ssm:GetParameters
              - ssm:ListAssociations
              - ssm:ListInstanceAssociations
              - ssm:PutInventory
              - ssm:UpdateAssociationStatus
              - ssm:UpdateInstanceAssociationStatus
              - ssm:UpdateInstanceInformation
            Effect: Allow
            Resource: '*'
          - Action:
              - ec2messages:AcknowledgeMessage
              - ec2messages:DeleteMessage
              - ec2messages:FailMessage
              - ec2messages:GetEndpoint
              - ec2messages:GetMessages
              - ec2messages:SendReply
            Effect: Allow
            Resource: '*'
          - Action:
              - cloudwatch:PutMetricData
            Effect: Allow
            Resource: '*'
          - Action:
              - ec2:DescribeInstanceStatus
            Effect: Allow
            Resource: '*'
          - Action:
              - ds:CreateComputer
              - ds:DescribeDirectories
            Effect: Allow
            Resource: '*'
          - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:DescribeLogGroups
              - logs:DescribeLogStreams
              - logs:PutLogEvents
            Effect: Allow
            Resource: '*'
          - Action:
              - s3:GetObject
            Effect: Allow
            Resource:
              - arn:aws:s3:::amazon-ssm-*
              - arn:aws:s3:::amazoncloudwatch-agent/*
          - Action:
              - s3:ListBucket
            Effect: Allow
            Resource: arn:aws:s3:::amazon-ssm-packages-*
        Version: 2012-10-17
      PolicyName: !Sub ra-guac-${AWS::StackName}
      Roles:
        - !Ref Ec2IamRole
    Type: AWS::IAM::Policy
  Ec2SecurityGroup:
    Properties:
      GroupDescription: Enable Guacamole remote access
      Tags:
        - Key: Name
          Value: !Sub ra-guac-ec2-${AWS::StackName}
      VpcId: !Ref VpcId
    Type: AWS::EC2::SecurityGroup
  GlobalAccelerator:
    Condition: UseGlobalAccelerator
    Properties:
      Enabled: True
      IpAddressType: IPV4
      Name: !Ref AWS::StackName
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
    Type: AWS::GlobalAccelerator::Accelerator
  GlobalAcceleratorListener:
    Condition: UseGlobalAccelerator
    Properties:
      AcceleratorArn: !Ref GlobalAccelerator
      ClientAffinity: SOURCE_IP
      PortRanges:
        - FromPort: 443
          ToPort: 443
      Protocol: TCP
    Type: AWS::GlobalAccelerator::Listener
  GlobalAcceleratorEndpointGroup:
    Condition: UseGlobalAccelerator
    Properties:
      EndpointConfigurations:
        - EndpointId: !Ref ALB
          Weight: 128
      EndpointGroupRegion: !Ref AWS::Region
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /guacamole
      HealthCheckPort: 443
      HealthCheckProtocol: HTTPS
      ListenerArn: !Ref GlobalAcceleratorListener
      ThresholdCount: 3
      TrafficDialPercentage: 100
    Type: AWS::GlobalAccelerator::EndpointGroup
  LaunchTemplate:
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          config:
            - setup
            - !If
              - InstallCloudWatchAgent
              - cw-agent-install
              - !Ref AWS::NoValue
            - make-guac
            - finalize
        cw-agent-install:
          commands:
            01-install-cloudwatch-agent:
              command: !Sub >-
                aws s3 cp ${CloudWatchAgentUrl} /etc/cfn/scripts/amazon-cloudwatch-agent.rpm &&
                yum -y localinstall /etc/cfn/scripts/amazon-cloudwatch-agent.rpm
            10-start-cloudwatch-agent:
              command: >-
                /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl
                -a fetch-config -m ec2 -c
                file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json -s
          files:
            /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json:
              content: !Sub
                - |
                  {
                    "logs":
                    {
                      "logs_collected":
                      {
                        "files":
                        {
                          "collect_list": [
                            {
                              "file_path": "/var/log/amazon/ssm/amazon-ssm-agent.log",
                              "log_group_name": "${local_LogGroup}",
                              "log_stream_name": "{instance_id}//var/log/amazon/ssm/amazon-ssm-agent.log",
                              "timestamp_format": "%H:%M:%S %y %b %-d"
                            },
                            {
                              "file_path": "/var/log/amazon/ssm/errors.log",
                              "log_group_name": "${local_LogGroup}",
                              "log_stream_name": "{instance_id}//var/log/amazon/ssm/errors.log",
                              "timestamp_format": "%H:%M:%S %y %b %-d"
                            },
                            {
                              "file_path": "/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log",
                              "log_group_name": "${local_LogGroup}",
                              "log_stream_name": "{instance_id}//opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log",
                              "timestamp_format": "%H:%M:%S %y %b %-d"
                            },
                            {
                              "file_path": "/var/log/cfn-init.log",
                              "log_group_name": "${local_LogGroup}",
                              "log_stream_name": "{instance_id}//var/log/cfn-init.log",
                              "timestamp_format": "%H:%M:%S %y %b %-d"
                            },
                            {
                              "file_path": "/var/log/cfn-init-cmd.log",
                              "log_group_name": "${local_LogGroup}",
                              "log_stream_name": "{instance_id}//var/log/cfn-init-cmd.log",
                              "timestamp_format": "%H:%M:%S %y %b %-d"
                            },
                            {
                              "file_path": "/var/log/messages",
                              "log_group_name": "${local_LogGroup}",
                              "log_stream_name": "{instance_id}//var/log/messages",
                              "timestamp_format": "%H:%M:%S %y %b %-d"
                            }
                          ]
                        }
                      },
                      "log_stream_name": "default_logs_{instance_id}"
                    }
                  }
                - local_LogGroup: !If [InstallCloudWatchAgent, !Ref GuacLaunchConfigLogGroup, !Ref 'AWS::NoValue']
        finalize:
          commands:
            10-signal-success:
              command: !Sub /opt/aws/bin/cfn-signal -e 0 --stack ${AWS::StackName} --resource AutoScalingGroup --region ${AWS::Region}
              ignoreErrors: 'true'
        make-guac:
          commands:
            10-make-guac:
              command: !Sub
                - >-
                  /etc/cfn/scripts/make-guac.sh
                  -V ${DockerGuacamoleImage}
                  -v ${DockerGuacdImage}
                  -w /aws/ec2/lx/${AWS::StackName}
                  ${local_UseLdapGuacBaseDN}
                  ${local_UseLdapDN}
                  ${local_UseLdapServer}
                  ${local_UseMySqlAutoCreateAccounts}
                  ${local_UseMySqlDatabaseName}
                  ${local_UseMySqlHostName}
                  ${local_UseMySqlPassword}
                  ${local_UseMySqlPort}
                  ${local_UseMySqlSslMode}
                  ${local_UseMySqlUserName}
                  ${local_UseSamlCallbackUrl}
                  ${local_UseSamlEntityId}
                  ${local_UseSamlGroupAttribute}
                  ${local_UseSamlIdpMetadataUrl}
                  ${local_UseURL1}
                  ${local_UseURLText1}
                  ${local_UseURL2}
                  ${local_UseURLText2}
                  ${local_UseBrandText}
                  ${local_UseExtensionPriority}
                  ${local_UseDockerUsername}
                  ${local_UseDockerPassword}
                - local_UseLdapGuacBaseDN: !If [UseLdap, !Sub '-C "${GuacBaseDN}"', '']
                  local_UseLdapDN: !If [UseLdap, !Sub '-D "${LdapDN}"', '']
                  local_UseLdapServer: !If [UseLdap, !Sub '-H "${LdapServer}"', '']
                  local_UseMySqlAutoCreateAccounts: !If [UseSaml, !Sub '-K "${MySqlAutoCreateAccounts}"' , '']
                  local_UseMySqlDatabaseName: !If [UseSaml, !Sub '-f "${MySqlDatabaseName}"', '']
                  local_UseMySqlHostName: !If [UseSaml, !Sub '-E "${MySqlHostName}"', '']
                  local_UseMySqlPassword: !If [UseSaml, !Sub '-g "${MySqlPassword}"', '']
                  local_UseMySqlPort: !If [UseSaml, !Sub '-e "${MySqlPort}"', '']
                  local_UseMySqlSslMode: !If [UseSaml, !Sub '-F "${MySqlSslMode}"', '']
                  local_UseMySqlUserName: !If [UseSaml, !Sub '-G "${MySqlUserName}"', '']
                  local_UseSamlCallbackUrl: !If [UseSaml, !Sub '-J "${SamlCallbackUrl}"', '']
                  local_UseSamlEntityId: !If [UseSaml, !Sub '-I "${SamlEntityId}"', '']
                  local_UseSamlGroupAttribute: !If [UseSaml, !Sub '-j "${SamlGroupAttribute}"', '']
                  local_UseSamlIdpMetadataUrl: !If [UseSaml, !Sub '-i "${SamlIdpMetadataUrl}"', '']
                  local_UseURL1: !If [UseURL1, !Sub ' -L "${URL1}"', '']
                  local_UseURLText1: !If [UseURLText1, !Sub ' -T "${URLText1}"', '']
                  local_UseURL2: !If [UseURL2, !Sub ' -l "${URL2}"', '']
                  local_UseURLText2: !If [UseURLText2, !Sub ' -t "${URLText2}"', '']
                  local_UseBrandText: !If [UseBrandText, !Sub ' -B "${BrandText}"', '']
                  local_UseExtensionPriority: !If [UseExtensionPriority, !Sub '-k "${ExtensionPriority}"', '']
                  local_UseDockerUsername: !If [UseDockerAuthentication, !Sub ' -S "${DockerUsernameSsm}"', '']
                  local_UseDockerPassword: !If [UseDockerAuthentication, !Sub ' -s "${DockerPasswordSsm}"', '']
        setup:
          commands:
            10-yum-update:
              command: yum -y update
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
                verbose=true
              group: root
              mode: '000400'
              owner: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.LaunchTemplate.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v -c update --stack ${AWS::StackName} --resource LaunchTemplate --region ${AWS::Region}
                runas=root
              group: root
              mode: '000400'
              owner: root
            /etc/cfn/scripts/make-guac.sh:
              group: root
              mode: '000700'
              owner: root
              source: !Sub ${RemoteAccessScriptsUrl}/scripts/make-guac.sh
            /etc/cfn/files/tomcat/conf/server.xml:
              group: root
              mode: '000744'
              owner: root
              source: !Sub ${RemoteAccessScriptsUrl}/scripts/files/server.xml
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
    Properties:
      LaunchTemplateData:
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              DeleteOnTermination: true
              VolumeType: gp3
        EbsOptimized: !FindInMap [InstanceTypeMap, !Ref InstanceType, SupportsEbsOptimized]
        IamInstanceProfile:
          Name: !Ref Ec2IamInstanceProfile
        ImageId: !If [UseAmiLookup, !Sub '${AmiIdLookup.Id}', !Ref AmiId]
        InstanceType: !Ref InstanceType
        KeyName: !Ref KeyPairName
        SecurityGroupIds:
          - !GetAtt Ec2SecurityGroup.GroupId
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            # CFN LaunchTemplate Update Toggle: ${ForceUpdateToggle}

            # Export AWS ENVs
            export AWS_DEFAULT_REGION=${AWS::Region}

            # Install ssm agent
            yum -y install https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm || true

            # Add cfn utils to path
            hash cfn-signal 2> /dev/null || PATH="${!PATH}:/usr/local/bin:/opt/aws/bin"

            # Execute cfn-init
            cfn-init -v -c config --stack ${AWS::StackName} --resource LaunchTemplate --region ${AWS::Region} || \
              ( \
              echo 'ERROR: cfn-init failed! Aborting!' ; \
              cfn-signal -e 1 --stack ${AWS::StackName} --resource AutoScalingGroup --region ${AWS::Region} ; \
              exit 1 ; \
              )
      LaunchTemplateName: !Ref AWS::StackName
      TagSpecifications:
        - ResourceType: launch-template
          Tags:
            - Key: Name
              Value: !Ref AWS::StackName
    Type: AWS::EC2::LaunchTemplate
  Listener:
    Properties:
      Certificates:
        - CertificateArn:
            !If
            - UseACM
            - !Sub arn:aws:acm:${AWS::Region}:${AWS::AccountId}:certificate/${SslCertificateName}
            - !Sub arn:aws:iam:${AWS::Region}:${AWS::AccountId}:server-certificate/${SslCertificateName}
      DefaultActions:
        - RedirectConfig:
            Host: '#{host}'
            Path: /guacamole
            Port: '#{port}'
            Protocol: '#{protocol}'
            Query: '#{query}'
            StatusCode: HTTP_301
          Type: redirect
      LoadBalancerArn: !Ref ALB
      Port: 443
      Protocol: HTTPS
    Type: AWS::ElasticLoadBalancingV2::Listener
  ListenerHTTP:
    Properties:
      DefaultActions:
        - RedirectConfig:
            Host: '#{host}'
            Path: '/#{path}'
            Port: '443'
            Protocol: HTTPS
            Query: '#{query}'
            StatusCode: HTTP_301
          Type: redirect
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP
    Type: AWS::ElasticLoadBalancingV2::Listener
  ListenerRuleForward:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref ALBTargetGroup
          Type: forward
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - /guacamole*
      ListenerArn: !Ref Listener
      Priority: 10
  PublicToAlbIngressTcp443:
    Properties:
      CidrIp: 0.0.0.0/0
      FromPort: 443
      GroupId: !Ref AlbSecurityGroup
      IpProtocol: tcp
      ToPort: 443
    Type: AWS::EC2::SecurityGroupIngress
  PublicToAlbIngressTcp80:
    Properties:
      CidrIp: 0.0.0.0/0
      FromPort: 80
      GroupId: !Ref AlbSecurityGroup
      IpProtocol: tcp
      ToPort: 80
    Type: AWS::EC2::SecurityGroupIngress
  Route53RecordSetGroup:
    Condition: UseRoute53DnsRecord
    Properties:
      HostedZoneId: !Ref Route53HostedZoneId
      RecordSets:
        - AliasTarget:
            DNSName: !Sub ${GlobalAccelerator.DnsName}
            EvaluateTargetHealth: True
            HostedZoneId: Z2BJ6XQ5FK7U4H
          Name: !Ref Route53DnsName
          Type: A
    Type: AWS::Route53::RecordSetGroup
  ScaleDownScheduledAction:
    Condition: UseScheduledAction
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      DesiredCapacity: !Ref ScaleDownDesiredCapacity
      Recurrence: !Ref ScaleDownSchedule
    Type: AWS::AutoScaling::ScheduledAction
  ScaleUpPolicy:
    Condition: UseScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AutoScalingGroup
      Cooldown: '60'
      ScalingAdjustment: 1
    Type: AWS::AutoScaling::ScalingPolicy
  ScaleUpScheduledAction:
    Condition: UseScheduledAction
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      DesiredCapacity: !Ref MaxCapacity
      Recurrence: !Ref ScaleUpSchedule
    Type: AWS::AutoScaling::ScheduledAction
  GuacLaunchConfigLogGroup:
    Condition: InstallCloudWatchAgent
    Properties:
      LogGroupName: !Sub /aws/ec2/lx/${AWS::StackName}
    Type: AWS::Logs::LogGroup
